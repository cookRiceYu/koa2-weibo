#!/usr/bin/env node

var app = require('../src/app');
var debug = require('debug')('demo:server');
var http = require('http');

// 从环境中获取端口并存储在Express中
var port = normalizePort(process.env.PORT || '3000');

// 创建 http 服务器
var server = http.createServer(app.callback());

// 在提供的端口上监听所有网络接口
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// 将端口规范化为数字、字符串或false。
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // 命名管道
    return val;
  }

  if (port >= 0) {
    // 端口号
    return port;
  }

  return false;
}
// HTTP服务器“错误”事件的事件侦听器。
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? '管道：' + port : '端口：' + port;
  // 处理特定的侦听错误
  switch (error.code) {
    case 'EACCES':
      console.error(bind + '需要提升的权限');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + '已在使用中');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
// HTTP服务器“侦听”事件的事件侦听器。
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? '管道：' + addr : '端口：' + addr.port;
  debug('监听：' + bind);
}
